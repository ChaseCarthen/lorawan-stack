// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v1.5.1
// - protoc             v4.22.2
// source: ttn/lorawan/v3/networkserver_relay.proto

package ttnpb

import (
	golang "github.com/TheThingsIndustries/protoc-gen-go-json/golang"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
)

// MarshalProtoJSON marshals the RelayConfiguration_Serving message to JSON.
func (x *RelayConfiguration_Serving) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.SecondChannel != nil || s.HasField("second_channel") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("second_channel")
		x.SecondChannel.MarshalProtoJSON(s.WithField("second_channel"))
	}
	if x.DefaultChannelIndex != 0 || s.HasField("default_channel_index") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("default_channel_index")
		s.WriteUint32(x.DefaultChannelIndex)
	}
	if x.CadPeriodicity != 0 || s.HasField("cad_periodicity") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("cad_periodicity")
		x.CadPeriodicity.MarshalProtoJSON(s)
	}
	if x.Limits != nil || s.HasField("limits") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("limits")
		x.Limits.MarshalProtoJSON(s.WithField("limits"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RelayConfiguration_Serving to JSON.
func (x *RelayConfiguration_Serving) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RelayConfiguration_Serving message from JSON.
func (x *RelayConfiguration_Serving) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "second_channel", "secondChannel":
			if s.ReadNil() {
				x.SecondChannel = nil
				return
			}
			x.SecondChannel = &RelaySecondChannel{}
			x.SecondChannel.UnmarshalProtoJSON(s.WithField("second_channel", true))
		case "default_channel_index", "defaultChannelIndex":
			s.AddField("default_channel_index")
			x.DefaultChannelIndex = s.ReadUint32()
		case "cad_periodicity", "cadPeriodicity":
			s.AddField("cad_periodicity")
			x.CadPeriodicity.UnmarshalProtoJSON(s)
		case "limits":
			if s.ReadNil() {
				x.Limits = nil
				return
			}
			x.Limits = &ServingRelayForwardingLimits{}
			x.Limits.UnmarshalProtoJSON(s.WithField("limits", true))
		}
	})
}

// UnmarshalJSON unmarshals the RelayConfiguration_Serving from JSON.
func (x *RelayConfiguration_Serving) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RelayConfiguration_Served message to JSON.
func (x *RelayConfiguration_Served) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Mode != nil {
		switch ov := x.Mode.(type) {
		case *RelayConfiguration_Served_Always:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("always")
			// NOTE: RelayEndDeviceAlwaysMode does not seem to implement MarshalProtoJSON.
			golang.MarshalMessage(s, ov.Always)
		case *RelayConfiguration_Served_Dynamic:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("dynamic")
			ov.Dynamic.MarshalProtoJSON(s.WithField("dynamic"))
		case *RelayConfiguration_Served_EndDeviceControlled:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("end_device_controlled")
			// NOTE: RelayEndDeviceControlledMode does not seem to implement MarshalProtoJSON.
			golang.MarshalMessage(s, ov.EndDeviceControlled)
		}
	}
	if x.Backoff != 0 || s.HasField("backoff") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("backoff")
		s.WriteUint32(x.Backoff)
	}
	if x.SecondChannel != nil || s.HasField("second_channel") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("second_channel")
		x.SecondChannel.MarshalProtoJSON(s.WithField("second_channel"))
	}
	if x.ServingDeviceId != "" || s.HasField("serving_device_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("serving_device_id")
		s.WriteString(x.ServingDeviceId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RelayConfiguration_Served to JSON.
func (x *RelayConfiguration_Served) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RelayConfiguration_Served message from JSON.
func (x *RelayConfiguration_Served) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "always":
			s.AddField("always")
			ov := &RelayConfiguration_Served_Always{}
			x.Mode = ov
			if s.ReadNil() {
				ov.Always = nil
				return
			}
			// NOTE: RelayEndDeviceAlwaysMode does not seem to implement UnmarshalProtoJSON.
			var v RelayEndDeviceAlwaysMode
			golang.UnmarshalMessage(s, &v)
			ov.Always = &v
		case "dynamic":
			ov := &RelayConfiguration_Served_Dynamic{}
			x.Mode = ov
			if s.ReadNil() {
				ov.Dynamic = nil
				return
			}
			ov.Dynamic = &RelayEndDeviceDynamicMode{}
			ov.Dynamic.UnmarshalProtoJSON(s.WithField("dynamic", true))
		case "end_device_controlled", "endDeviceControlled":
			s.AddField("end_device_controlled")
			ov := &RelayConfiguration_Served_EndDeviceControlled{}
			x.Mode = ov
			if s.ReadNil() {
				ov.EndDeviceControlled = nil
				return
			}
			// NOTE: RelayEndDeviceControlledMode does not seem to implement UnmarshalProtoJSON.
			var v RelayEndDeviceControlledMode
			golang.UnmarshalMessage(s, &v)
			ov.EndDeviceControlled = &v
		case "backoff":
			s.AddField("backoff")
			x.Backoff = s.ReadUint32()
		case "second_channel", "secondChannel":
			if s.ReadNil() {
				x.SecondChannel = nil
				return
			}
			x.SecondChannel = &RelaySecondChannel{}
			x.SecondChannel.UnmarshalProtoJSON(s.WithField("second_channel", true))
		case "serving_device_id", "servingDeviceId":
			s.AddField("serving_device_id")
			x.ServingDeviceId = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the RelayConfiguration_Served from JSON.
func (x *RelayConfiguration_Served) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RelayConfiguration message to JSON.
func (x *RelayConfiguration) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Mode != nil {
		switch ov := x.Mode.(type) {
		case *RelayConfiguration_Serving_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("serving")
			ov.Serving.MarshalProtoJSON(s.WithField("serving"))
		case *RelayConfiguration_Served_:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("served")
			ov.Served.MarshalProtoJSON(s.WithField("served"))
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RelayConfiguration to JSON.
func (x *RelayConfiguration) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RelayConfiguration message from JSON.
func (x *RelayConfiguration) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "serving":
			ov := &RelayConfiguration_Serving_{}
			x.Mode = ov
			if s.ReadNil() {
				ov.Serving = nil
				return
			}
			ov.Serving = &RelayConfiguration_Serving{}
			ov.Serving.UnmarshalProtoJSON(s.WithField("serving", true))
		case "served":
			ov := &RelayConfiguration_Served_{}
			x.Mode = ov
			if s.ReadNil() {
				ov.Served = nil
				return
			}
			ov.Served = &RelayConfiguration_Served{}
			ov.Served.UnmarshalProtoJSON(s.WithField("served", true))
		}
	})
}

// UnmarshalJSON unmarshals the RelayConfiguration from JSON.
func (x *RelayConfiguration) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateRelayRequest message to JSON.
func (x *CreateRelayRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.Configuration != nil || s.HasField("configuration") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("configuration")
		x.Configuration.MarshalProtoJSON(s.WithField("configuration"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateRelayRequest to JSON.
func (x *CreateRelayRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateRelayRequest message from JSON.
func (x *CreateRelayRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "configuration":
			if s.ReadNil() {
				x.Configuration = nil
				return
			}
			x.Configuration = &RelayConfiguration{}
			x.Configuration.UnmarshalProtoJSON(s.WithField("configuration", true))
		}
	})
}

// UnmarshalJSON unmarshals the CreateRelayRequest from JSON.
func (x *CreateRelayRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateRelayResponse message to JSON.
func (x *CreateRelayResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Configuration != nil || s.HasField("configuration") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("configuration")
		x.Configuration.MarshalProtoJSON(s.WithField("configuration"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateRelayResponse to JSON.
func (x *CreateRelayResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateRelayResponse message from JSON.
func (x *CreateRelayResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "configuration":
			if s.ReadNil() {
				x.Configuration = nil
				return
			}
			x.Configuration = &RelayConfiguration{}
			x.Configuration.UnmarshalProtoJSON(s.WithField("configuration", true))
		}
	})
}

// UnmarshalJSON unmarshals the CreateRelayResponse from JSON.
func (x *CreateRelayResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetRelayRequest message to JSON.
func (x *GetRelayRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetRelayRequest to JSON.
func (x *GetRelayRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetRelayRequest message from JSON.
func (x *GetRelayRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the GetRelayRequest from JSON.
func (x *GetRelayRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetRelayResponse message to JSON.
func (x *GetRelayResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Configuration != nil || s.HasField("configuration") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("configuration")
		x.Configuration.MarshalProtoJSON(s.WithField("configuration"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetRelayResponse to JSON.
func (x *GetRelayResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetRelayResponse message from JSON.
func (x *GetRelayResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "configuration":
			if s.ReadNil() {
				x.Configuration = nil
				return
			}
			x.Configuration = &RelayConfiguration{}
			x.Configuration.UnmarshalProtoJSON(s.WithField("configuration", true))
		}
	})
}

// UnmarshalJSON unmarshals the GetRelayResponse from JSON.
func (x *GetRelayResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateRelayRequest message to JSON.
func (x *UpdateRelayRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.Configuration != nil || s.HasField("configuration") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("configuration")
		x.Configuration.MarshalProtoJSON(s.WithField("configuration"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateRelayRequest to JSON.
func (x *UpdateRelayRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateRelayRequest message from JSON.
func (x *UpdateRelayRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "configuration":
			if s.ReadNil() {
				x.Configuration = nil
				return
			}
			x.Configuration = &RelayConfiguration{}
			x.Configuration.UnmarshalProtoJSON(s.WithField("configuration", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the UpdateRelayRequest from JSON.
func (x *UpdateRelayRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateRelayResponse message to JSON.
func (x *UpdateRelayResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Configuration != nil || s.HasField("configuration") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("configuration")
		x.Configuration.MarshalProtoJSON(s.WithField("configuration"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateRelayResponse to JSON.
func (x *UpdateRelayResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateRelayResponse message from JSON.
func (x *UpdateRelayResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "configuration":
			if s.ReadNil() {
				x.Configuration = nil
				return
			}
			x.Configuration = &RelayConfiguration{}
			x.Configuration.UnmarshalProtoJSON(s.WithField("configuration", true))
		}
	})
}

// UnmarshalJSON unmarshals the UpdateRelayResponse from JSON.
func (x *UpdateRelayResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DeleteRelayRequest message to JSON.
func (x *DeleteRelayRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DeleteRelayRequest to JSON.
func (x *DeleteRelayRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DeleteRelayRequest message from JSON.
func (x *DeleteRelayRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		}
	})
}

// UnmarshalJSON unmarshals the DeleteRelayRequest from JSON.
func (x *DeleteRelayRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RelayConfigurationUplinkForwardingRule message to JSON.
func (x *RelayConfigurationUplinkForwardingRule) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Limits != nil || s.HasField("limits") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("limits")
		x.Limits.MarshalProtoJSON(s.WithField("limits"))
	}
	if x.LastWFCnt != 0 || s.HasField("last_w_f_cnt") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("last_w_f_cnt")
		s.WriteUint32(x.LastWFCnt)
	}
	if x.DeviceId != "" || s.HasField("device_id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("device_id")
		s.WriteString(x.DeviceId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RelayConfigurationUplinkForwardingRule to JSON.
func (x *RelayConfigurationUplinkForwardingRule) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RelayConfigurationUplinkForwardingRule message from JSON.
func (x *RelayConfigurationUplinkForwardingRule) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "limits":
			if s.ReadNil() {
				x.Limits = nil
				return
			}
			x.Limits = &RelayUplinkForwardLimits{}
			x.Limits.UnmarshalProtoJSON(s.WithField("limits", true))
		case "last_w_f_cnt", "lastWFCnt":
			s.AddField("last_w_f_cnt")
			x.LastWFCnt = s.ReadUint32()
		case "device_id", "deviceId":
			s.AddField("device_id")
			x.DeviceId = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the RelayConfigurationUplinkForwardingRule from JSON.
func (x *RelayConfigurationUplinkForwardingRule) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateRelayUplinkForwardingRuleRequest message to JSON.
func (x *CreateRelayUplinkForwardingRuleRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.Index != 0 || s.HasField("index") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("index")
		s.WriteUint32(x.Index)
	}
	if x.UplinkForwardingRule != nil || s.HasField("uplink_forwarding_rule") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_forwarding_rule")
		x.UplinkForwardingRule.MarshalProtoJSON(s.WithField("uplink_forwarding_rule"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateRelayUplinkForwardingRuleRequest to JSON.
func (x *CreateRelayUplinkForwardingRuleRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateRelayUplinkForwardingRuleRequest message from JSON.
func (x *CreateRelayUplinkForwardingRuleRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "index":
			s.AddField("index")
			x.Index = s.ReadUint32()
		case "uplink_forwarding_rule", "uplinkForwardingRule":
			if s.ReadNil() {
				x.UplinkForwardingRule = nil
				return
			}
			x.UplinkForwardingRule = &RelayConfigurationUplinkForwardingRule{}
			x.UplinkForwardingRule.UnmarshalProtoJSON(s.WithField("uplink_forwarding_rule", true))
		}
	})
}

// UnmarshalJSON unmarshals the CreateRelayUplinkForwardingRuleRequest from JSON.
func (x *CreateRelayUplinkForwardingRuleRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateRelayUplinkForwardingRuleResponse message to JSON.
func (x *CreateRelayUplinkForwardingRuleResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UplinkForwardingRule != nil || s.HasField("uplink_forwarding_rule") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_forwarding_rule")
		x.UplinkForwardingRule.MarshalProtoJSON(s.WithField("uplink_forwarding_rule"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateRelayUplinkForwardingRuleResponse to JSON.
func (x *CreateRelayUplinkForwardingRuleResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateRelayUplinkForwardingRuleResponse message from JSON.
func (x *CreateRelayUplinkForwardingRuleResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "uplink_forwarding_rule", "uplinkForwardingRule":
			if s.ReadNil() {
				x.UplinkForwardingRule = nil
				return
			}
			x.UplinkForwardingRule = &RelayConfigurationUplinkForwardingRule{}
			x.UplinkForwardingRule.UnmarshalProtoJSON(s.WithField("uplink_forwarding_rule", true))
		}
	})
}

// UnmarshalJSON unmarshals the CreateRelayUplinkForwardingRuleResponse from JSON.
func (x *CreateRelayUplinkForwardingRuleResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetRelayUplinkForwardingRuleRequest message to JSON.
func (x *GetRelayUplinkForwardingRuleRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.Index != 0 || s.HasField("index") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("index")
		s.WriteUint32(x.Index)
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetRelayUplinkForwardingRuleRequest to JSON.
func (x *GetRelayUplinkForwardingRuleRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetRelayUplinkForwardingRuleRequest message from JSON.
func (x *GetRelayUplinkForwardingRuleRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "index":
			s.AddField("index")
			x.Index = s.ReadUint32()
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the GetRelayUplinkForwardingRuleRequest from JSON.
func (x *GetRelayUplinkForwardingRuleRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the GetRelayUplinkForwardingRuleResponse message to JSON.
func (x *GetRelayUplinkForwardingRuleResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UplinkForwardingRule != nil || s.HasField("uplink_forwarding_rule") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_forwarding_rule")
		x.UplinkForwardingRule.MarshalProtoJSON(s.WithField("uplink_forwarding_rule"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the GetRelayUplinkForwardingRuleResponse to JSON.
func (x *GetRelayUplinkForwardingRuleResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the GetRelayUplinkForwardingRuleResponse message from JSON.
func (x *GetRelayUplinkForwardingRuleResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "uplink_forwarding_rule", "uplinkForwardingRule":
			if s.ReadNil() {
				x.UplinkForwardingRule = nil
				return
			}
			x.UplinkForwardingRule = &RelayConfigurationUplinkForwardingRule{}
			x.UplinkForwardingRule.UnmarshalProtoJSON(s.WithField("uplink_forwarding_rule", true))
		}
	})
}

// UnmarshalJSON unmarshals the GetRelayUplinkForwardingRuleResponse from JSON.
func (x *GetRelayUplinkForwardingRuleResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListRelayUplinkForwardingRulesRequest message to JSON.
func (x *ListRelayUplinkForwardingRulesRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListRelayUplinkForwardingRulesRequest to JSON.
func (x *ListRelayUplinkForwardingRulesRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListRelayUplinkForwardingRulesRequest message from JSON.
func (x *ListRelayUplinkForwardingRulesRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the ListRelayUplinkForwardingRulesRequest from JSON.
func (x *ListRelayUplinkForwardingRulesRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ListRelayUplinkForwardingRulesResponse message to JSON.
func (x *ListRelayUplinkForwardingRulesResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.UplinkForwardingRules) > 0 || s.HasField("uplink_forwarding_rules") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_forwarding_rules")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.UplinkForwardingRules {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("uplink_forwarding_rules"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ListRelayUplinkForwardingRulesResponse to JSON.
func (x *ListRelayUplinkForwardingRulesResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ListRelayUplinkForwardingRulesResponse message from JSON.
func (x *ListRelayUplinkForwardingRulesResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "uplink_forwarding_rules", "uplinkForwardingRules":
			s.AddField("uplink_forwarding_rules")
			if s.ReadNil() {
				x.UplinkForwardingRules = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.UplinkForwardingRules = append(x.UplinkForwardingRules, nil)
					return
				}
				v := &RelayConfigurationUplinkForwardingRule{}
				v.UnmarshalProtoJSON(s.WithField("uplink_forwarding_rules", false))
				if s.Err() != nil {
					return
				}
				x.UplinkForwardingRules = append(x.UplinkForwardingRules, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the ListRelayUplinkForwardingRulesResponse from JSON.
func (x *ListRelayUplinkForwardingRulesResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateRelayUplinkForwardingRuleRequest message to JSON.
func (x *UpdateRelayUplinkForwardingRuleRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.Index != 0 || s.HasField("index") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("index")
		s.WriteUint32(x.Index)
	}
	if x.UplinkForwardingRule != nil || s.HasField("uplink_forwarding_rule") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_forwarding_rule")
		x.UplinkForwardingRule.MarshalProtoJSON(s.WithField("uplink_forwarding_rule"))
	}
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			golang.MarshalLegacyFieldMask(s, x.FieldMask)
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateRelayUplinkForwardingRuleRequest to JSON.
func (x *UpdateRelayUplinkForwardingRuleRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateRelayUplinkForwardingRuleRequest message from JSON.
func (x *UpdateRelayUplinkForwardingRuleRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "index":
			s.AddField("index")
			x.Index = s.ReadUint32()
		case "uplink_forwarding_rule", "uplinkForwardingRule":
			if s.ReadNil() {
				x.UplinkForwardingRule = nil
				return
			}
			x.UplinkForwardingRule = &RelayConfigurationUplinkForwardingRule{}
			x.UplinkForwardingRule.UnmarshalProtoJSON(s.WithField("uplink_forwarding_rule", true))
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := golang.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		}
	})
}

// UnmarshalJSON unmarshals the UpdateRelayUplinkForwardingRuleRequest from JSON.
func (x *UpdateRelayUplinkForwardingRuleRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateRelayUplinkForwardingRuleResponse message to JSON.
func (x *UpdateRelayUplinkForwardingRuleResponse) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.UplinkForwardingRule != nil || s.HasField("uplink_forwarding_rule") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uplink_forwarding_rule")
		x.UplinkForwardingRule.MarshalProtoJSON(s.WithField("uplink_forwarding_rule"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateRelayUplinkForwardingRuleResponse to JSON.
func (x *UpdateRelayUplinkForwardingRuleResponse) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateRelayUplinkForwardingRuleResponse message from JSON.
func (x *UpdateRelayUplinkForwardingRuleResponse) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "uplink_forwarding_rule", "uplinkForwardingRule":
			if s.ReadNil() {
				x.UplinkForwardingRule = nil
				return
			}
			x.UplinkForwardingRule = &RelayConfigurationUplinkForwardingRule{}
			x.UplinkForwardingRule.UnmarshalProtoJSON(s.WithField("uplink_forwarding_rule", true))
		}
	})
}

// UnmarshalJSON unmarshals the UpdateRelayUplinkForwardingRuleResponse from JSON.
func (x *UpdateRelayUplinkForwardingRuleResponse) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the DeleteRelayUplinkForwardingRuleRequest message to JSON.
func (x *DeleteRelayUplinkForwardingRuleRequest) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EndDeviceIds != nil || s.HasField("end_device_ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("end_device_ids")
		x.EndDeviceIds.MarshalProtoJSON(s.WithField("end_device_ids"))
	}
	if x.Index != 0 || s.HasField("index") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("index")
		s.WriteUint32(x.Index)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the DeleteRelayUplinkForwardingRuleRequest to JSON.
func (x *DeleteRelayUplinkForwardingRuleRequest) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the DeleteRelayUplinkForwardingRuleRequest message from JSON.
func (x *DeleteRelayUplinkForwardingRuleRequest) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "end_device_ids", "endDeviceIds":
			if s.ReadNil() {
				x.EndDeviceIds = nil
				return
			}
			x.EndDeviceIds = &EndDeviceIdentifiers{}
			x.EndDeviceIds.UnmarshalProtoJSON(s.WithField("end_device_ids", true))
		case "index":
			s.AddField("index")
			x.Index = s.ReadUint32()
		}
	})
}

// UnmarshalJSON unmarshals the DeleteRelayUplinkForwardingRuleRequest from JSON.
func (x *DeleteRelayUplinkForwardingRuleRequest) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
