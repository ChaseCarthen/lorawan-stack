// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttnpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// ValidateFields checks the field values on CreateRelayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRelayRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = CreateRelayRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "end_device_ids":

			if m.GetEndDeviceIds() == nil {
				return CreateRelayRequestValidationError{
					field:  "end_device_ids",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return CreateRelayRequestValidationError{
						field:  "end_device_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "settings":

			if m.GetSettings() == nil {
				return CreateRelayRequestValidationError{
					field:  "settings",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetSettings()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return CreateRelayRequestValidationError{
						field:  "settings",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return CreateRelayRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// CreateRelayRequestValidationError is the validation error returned by
// CreateRelayRequest.ValidateFields if the designated constraints aren't met.
type CreateRelayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRelayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRelayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRelayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRelayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRelayRequestValidationError) ErrorName() string {
	return "CreateRelayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRelayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRelayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRelayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRelayRequestValidationError{}

// ValidateFields checks the field values on CreateRelayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRelayResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = CreateRelayResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "settings":

			if v, ok := interface{}(m.GetSettings()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return CreateRelayResponseValidationError{
						field:  "settings",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return CreateRelayResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// CreateRelayResponseValidationError is the validation error returned by
// CreateRelayResponse.ValidateFields if the designated constraints aren't met.
type CreateRelayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRelayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRelayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRelayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRelayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRelayResponseValidationError) ErrorName() string {
	return "CreateRelayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRelayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRelayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRelayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRelayResponseValidationError{}

// ValidateFields checks the field values on GetRelayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRelayRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GetRelayRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "end_device_ids":

			if m.GetEndDeviceIds() == nil {
				return GetRelayRequestValidationError{
					field:  "end_device_ids",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GetRelayRequestValidationError{
						field:  "end_device_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "field_mask":

			if v, ok := interface{}(m.GetFieldMask()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GetRelayRequestValidationError{
						field:  "field_mask",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return GetRelayRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GetRelayRequestValidationError is the validation error returned by
// GetRelayRequest.ValidateFields if the designated constraints aren't met.
type GetRelayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelayRequestValidationError) ErrorName() string { return "GetRelayRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRelayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelayRequestValidationError{}

// ValidateFields checks the field values on GetRelayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetRelayResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GetRelayResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "settings":

			if v, ok := interface{}(m.GetSettings()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GetRelayResponseValidationError{
						field:  "settings",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return GetRelayResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GetRelayResponseValidationError is the validation error returned by
// GetRelayResponse.ValidateFields if the designated constraints aren't met.
type GetRelayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelayResponseValidationError) ErrorName() string { return "GetRelayResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetRelayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelayResponseValidationError{}

// ValidateFields checks the field values on UpdateRelayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRelayRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = UpdateRelayRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "end_device_ids":

			if m.GetEndDeviceIds() == nil {
				return UpdateRelayRequestValidationError{
					field:  "end_device_ids",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return UpdateRelayRequestValidationError{
						field:  "end_device_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "settings":

			if m.GetSettings() == nil {
				return UpdateRelayRequestValidationError{
					field:  "settings",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetSettings()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return UpdateRelayRequestValidationError{
						field:  "settings",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "field_mask":

			if v, ok := interface{}(m.GetFieldMask()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return UpdateRelayRequestValidationError{
						field:  "field_mask",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return UpdateRelayRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// UpdateRelayRequestValidationError is the validation error returned by
// UpdateRelayRequest.ValidateFields if the designated constraints aren't met.
type UpdateRelayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelayRequestValidationError) ErrorName() string {
	return "UpdateRelayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelayRequestValidationError{}

// ValidateFields checks the field values on UpdateRelayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRelayResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = UpdateRelayResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "settings":

			if v, ok := interface{}(m.GetSettings()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return UpdateRelayResponseValidationError{
						field:  "settings",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return UpdateRelayResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// UpdateRelayResponseValidationError is the validation error returned by
// UpdateRelayResponse.ValidateFields if the designated constraints aren't met.
type UpdateRelayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelayResponseValidationError) ErrorName() string {
	return "UpdateRelayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelayResponseValidationError{}

// ValidateFields checks the field values on DeleteRelayRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRelayRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = DeleteRelayRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "end_device_ids":

			if m.GetEndDeviceIds() == nil {
				return DeleteRelayRequestValidationError{
					field:  "end_device_ids",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return DeleteRelayRequestValidationError{
						field:  "end_device_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return DeleteRelayRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// DeleteRelayRequestValidationError is the validation error returned by
// DeleteRelayRequest.ValidateFields if the designated constraints aren't met.
type DeleteRelayRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelayRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelayRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelayRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelayRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelayRequestValidationError) ErrorName() string {
	return "DeleteRelayRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelayRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelayRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelayRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelayRequestValidationError{}

// ValidateFields checks the field values on DeleteRelayResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRelayResponse) ValidateFields(paths ...string) error {
	if len(paths) > 0 {
		return fmt.Errorf("message DeleteRelayResponse has no fields, but paths %s were specified", paths)
	}
	return nil
}

// DeleteRelayResponseValidationError is the validation error returned by
// DeleteRelayResponse.ValidateFields if the designated constraints aren't met.
type DeleteRelayResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelayResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelayResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelayResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelayResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelayResponseValidationError) ErrorName() string {
	return "DeleteRelayResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelayResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelayResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelayResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelayResponseValidationError{}

// ValidateFields checks the field values on
// CreateRelayUplinkForwardingRuleRequest with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *CreateRelayUplinkForwardingRuleRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = CreateRelayUplinkForwardingRuleRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "end_device_ids":

			if m.GetEndDeviceIds() == nil {
				return CreateRelayUplinkForwardingRuleRequestValidationError{
					field:  "end_device_ids",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return CreateRelayUplinkForwardingRuleRequestValidationError{
						field:  "end_device_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "index":

			if m.GetIndex() > 15 {
				return CreateRelayUplinkForwardingRuleRequestValidationError{
					field:  "index",
					reason: "value must be less than or equal to 15",
				}
			}

		case "rule":

			if m.GetRule() == nil {
				return CreateRelayUplinkForwardingRuleRequestValidationError{
					field:  "rule",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetRule()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return CreateRelayUplinkForwardingRuleRequestValidationError{
						field:  "rule",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return CreateRelayUplinkForwardingRuleRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// CreateRelayUplinkForwardingRuleRequestValidationError is the validation
// error returned by CreateRelayUplinkForwardingRuleRequest.ValidateFields if
// the designated constraints aren't met.
type CreateRelayUplinkForwardingRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRelayUplinkForwardingRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRelayUplinkForwardingRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRelayUplinkForwardingRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRelayUplinkForwardingRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRelayUplinkForwardingRuleRequestValidationError) ErrorName() string {
	return "CreateRelayUplinkForwardingRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRelayUplinkForwardingRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRelayUplinkForwardingRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRelayUplinkForwardingRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRelayUplinkForwardingRuleRequestValidationError{}

// ValidateFields checks the field values on
// CreateRelayUplinkForwardingRuleResponse with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *CreateRelayUplinkForwardingRuleResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = CreateRelayUplinkForwardingRuleResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "rule":

			if v, ok := interface{}(m.GetRule()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return CreateRelayUplinkForwardingRuleResponseValidationError{
						field:  "rule",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return CreateRelayUplinkForwardingRuleResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// CreateRelayUplinkForwardingRuleResponseValidationError is the validation
// error returned by CreateRelayUplinkForwardingRuleResponse.ValidateFields if
// the designated constraints aren't met.
type CreateRelayUplinkForwardingRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRelayUplinkForwardingRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRelayUplinkForwardingRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRelayUplinkForwardingRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRelayUplinkForwardingRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRelayUplinkForwardingRuleResponseValidationError) ErrorName() string {
	return "CreateRelayUplinkForwardingRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRelayUplinkForwardingRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRelayUplinkForwardingRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRelayUplinkForwardingRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRelayUplinkForwardingRuleResponseValidationError{}

// ValidateFields checks the field values on
// GetRelayUplinkForwardingRuleRequest with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *GetRelayUplinkForwardingRuleRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GetRelayUplinkForwardingRuleRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "end_device_ids":

			if m.GetEndDeviceIds() == nil {
				return GetRelayUplinkForwardingRuleRequestValidationError{
					field:  "end_device_ids",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GetRelayUplinkForwardingRuleRequestValidationError{
						field:  "end_device_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "index":

			if m.GetIndex() > 15 {
				return GetRelayUplinkForwardingRuleRequestValidationError{
					field:  "index",
					reason: "value must be less than or equal to 15",
				}
			}

		case "field_mask":

			if v, ok := interface{}(m.GetFieldMask()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GetRelayUplinkForwardingRuleRequestValidationError{
						field:  "field_mask",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return GetRelayUplinkForwardingRuleRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GetRelayUplinkForwardingRuleRequestValidationError is the validation error
// returned by GetRelayUplinkForwardingRuleRequest.ValidateFields if the
// designated constraints aren't met.
type GetRelayUplinkForwardingRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelayUplinkForwardingRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelayUplinkForwardingRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelayUplinkForwardingRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelayUplinkForwardingRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelayUplinkForwardingRuleRequestValidationError) ErrorName() string {
	return "GetRelayUplinkForwardingRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelayUplinkForwardingRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelayUplinkForwardingRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelayUplinkForwardingRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelayUplinkForwardingRuleRequestValidationError{}

// ValidateFields checks the field values on
// GetRelayUplinkForwardingRuleResponse with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *GetRelayUplinkForwardingRuleResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = GetRelayUplinkForwardingRuleResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "rule":

			if v, ok := interface{}(m.GetRule()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return GetRelayUplinkForwardingRuleResponseValidationError{
						field:  "rule",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return GetRelayUplinkForwardingRuleResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// GetRelayUplinkForwardingRuleResponseValidationError is the validation error
// returned by GetRelayUplinkForwardingRuleResponse.ValidateFields if the
// designated constraints aren't met.
type GetRelayUplinkForwardingRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRelayUplinkForwardingRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRelayUplinkForwardingRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRelayUplinkForwardingRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRelayUplinkForwardingRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRelayUplinkForwardingRuleResponseValidationError) ErrorName() string {
	return "GetRelayUplinkForwardingRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRelayUplinkForwardingRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRelayUplinkForwardingRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRelayUplinkForwardingRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRelayUplinkForwardingRuleResponseValidationError{}

// ValidateFields checks the field values on
// ListRelayUplinkForwardingRulesRequest with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *ListRelayUplinkForwardingRulesRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = ListRelayUplinkForwardingRulesRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "end_device_ids":

			if m.GetEndDeviceIds() == nil {
				return ListRelayUplinkForwardingRulesRequestValidationError{
					field:  "end_device_ids",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ListRelayUplinkForwardingRulesRequestValidationError{
						field:  "end_device_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "field_mask":

			if v, ok := interface{}(m.GetFieldMask()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return ListRelayUplinkForwardingRulesRequestValidationError{
						field:  "field_mask",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return ListRelayUplinkForwardingRulesRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// ListRelayUplinkForwardingRulesRequestValidationError is the validation error
// returned by ListRelayUplinkForwardingRulesRequest.ValidateFields if the
// designated constraints aren't met.
type ListRelayUplinkForwardingRulesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRelayUplinkForwardingRulesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRelayUplinkForwardingRulesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRelayUplinkForwardingRulesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRelayUplinkForwardingRulesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRelayUplinkForwardingRulesRequestValidationError) ErrorName() string {
	return "ListRelayUplinkForwardingRulesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRelayUplinkForwardingRulesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRelayUplinkForwardingRulesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRelayUplinkForwardingRulesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRelayUplinkForwardingRulesRequestValidationError{}

// ValidateFields checks the field values on
// ListRelayUplinkForwardingRulesResponse with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *ListRelayUplinkForwardingRulesResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = ListRelayUplinkForwardingRulesResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "rules":

			for idx, item := range m.GetRules() {
				_, _ = idx, item

				if v, ok := interface{}(item).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return ListRelayUplinkForwardingRulesResponseValidationError{
							field:  fmt.Sprintf("rules[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		default:
			return ListRelayUplinkForwardingRulesResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// ListRelayUplinkForwardingRulesResponseValidationError is the validation
// error returned by ListRelayUplinkForwardingRulesResponse.ValidateFields if
// the designated constraints aren't met.
type ListRelayUplinkForwardingRulesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRelayUplinkForwardingRulesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRelayUplinkForwardingRulesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRelayUplinkForwardingRulesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRelayUplinkForwardingRulesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRelayUplinkForwardingRulesResponseValidationError) ErrorName() string {
	return "ListRelayUplinkForwardingRulesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRelayUplinkForwardingRulesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRelayUplinkForwardingRulesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRelayUplinkForwardingRulesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRelayUplinkForwardingRulesResponseValidationError{}

// ValidateFields checks the field values on
// UpdateRelayUplinkForwardingRuleRequest with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *UpdateRelayUplinkForwardingRuleRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = UpdateRelayUplinkForwardingRuleRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "end_device_ids":

			if m.GetEndDeviceIds() == nil {
				return UpdateRelayUplinkForwardingRuleRequestValidationError{
					field:  "end_device_ids",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return UpdateRelayUplinkForwardingRuleRequestValidationError{
						field:  "end_device_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "index":

			if m.GetIndex() > 15 {
				return UpdateRelayUplinkForwardingRuleRequestValidationError{
					field:  "index",
					reason: "value must be less than or equal to 15",
				}
			}

		case "rule":

			if m.GetRule() == nil {
				return UpdateRelayUplinkForwardingRuleRequestValidationError{
					field:  "rule",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetRule()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return UpdateRelayUplinkForwardingRuleRequestValidationError{
						field:  "rule",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "field_mask":

			if v, ok := interface{}(m.GetFieldMask()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return UpdateRelayUplinkForwardingRuleRequestValidationError{
						field:  "field_mask",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return UpdateRelayUplinkForwardingRuleRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// UpdateRelayUplinkForwardingRuleRequestValidationError is the validation
// error returned by UpdateRelayUplinkForwardingRuleRequest.ValidateFields if
// the designated constraints aren't met.
type UpdateRelayUplinkForwardingRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelayUplinkForwardingRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelayUplinkForwardingRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelayUplinkForwardingRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelayUplinkForwardingRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelayUplinkForwardingRuleRequestValidationError) ErrorName() string {
	return "UpdateRelayUplinkForwardingRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelayUplinkForwardingRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelayUplinkForwardingRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelayUplinkForwardingRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelayUplinkForwardingRuleRequestValidationError{}

// ValidateFields checks the field values on
// UpdateRelayUplinkForwardingRuleResponse with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *UpdateRelayUplinkForwardingRuleResponse) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = UpdateRelayUplinkForwardingRuleResponseFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "rule":

			if v, ok := interface{}(m.GetRule()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return UpdateRelayUplinkForwardingRuleResponseValidationError{
						field:  "rule",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		default:
			return UpdateRelayUplinkForwardingRuleResponseValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// UpdateRelayUplinkForwardingRuleResponseValidationError is the validation
// error returned by UpdateRelayUplinkForwardingRuleResponse.ValidateFields if
// the designated constraints aren't met.
type UpdateRelayUplinkForwardingRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRelayUplinkForwardingRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRelayUplinkForwardingRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRelayUplinkForwardingRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRelayUplinkForwardingRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRelayUplinkForwardingRuleResponseValidationError) ErrorName() string {
	return "UpdateRelayUplinkForwardingRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRelayUplinkForwardingRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRelayUplinkForwardingRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRelayUplinkForwardingRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRelayUplinkForwardingRuleResponseValidationError{}

// ValidateFields checks the field values on
// DeleteRelayUplinkForwardingRuleRequest with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *DeleteRelayUplinkForwardingRuleRequest) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = DeleteRelayUplinkForwardingRuleRequestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "end_device_ids":

			if m.GetEndDeviceIds() == nil {
				return DeleteRelayUplinkForwardingRuleRequestValidationError{
					field:  "end_device_ids",
					reason: "value is required",
				}
			}

			if v, ok := interface{}(m.GetEndDeviceIds()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return DeleteRelayUplinkForwardingRuleRequestValidationError{
						field:  "end_device_ids",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "index":

			if m.GetIndex() > 15 {
				return DeleteRelayUplinkForwardingRuleRequestValidationError{
					field:  "index",
					reason: "value must be less than or equal to 15",
				}
			}

		default:
			return DeleteRelayUplinkForwardingRuleRequestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// DeleteRelayUplinkForwardingRuleRequestValidationError is the validation
// error returned by DeleteRelayUplinkForwardingRuleRequest.ValidateFields if
// the designated constraints aren't met.
type DeleteRelayUplinkForwardingRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelayUplinkForwardingRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelayUplinkForwardingRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelayUplinkForwardingRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelayUplinkForwardingRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelayUplinkForwardingRuleRequestValidationError) ErrorName() string {
	return "DeleteRelayUplinkForwardingRuleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelayUplinkForwardingRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelayUplinkForwardingRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelayUplinkForwardingRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelayUplinkForwardingRuleRequestValidationError{}

// ValidateFields checks the field values on
// DeleteRelayUplinkForwardingRuleResponse with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *DeleteRelayUplinkForwardingRuleResponse) ValidateFields(paths ...string) error {
	if len(paths) > 0 {
		return fmt.Errorf("message DeleteRelayUplinkForwardingRuleResponse has no fields, but paths %s were specified", paths)
	}
	return nil
}

// DeleteRelayUplinkForwardingRuleResponseValidationError is the validation
// error returned by DeleteRelayUplinkForwardingRuleResponse.ValidateFields if
// the designated constraints aren't met.
type DeleteRelayUplinkForwardingRuleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRelayUplinkForwardingRuleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRelayUplinkForwardingRuleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRelayUplinkForwardingRuleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRelayUplinkForwardingRuleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRelayUplinkForwardingRuleResponseValidationError) ErrorName() string {
	return "DeleteRelayUplinkForwardingRuleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRelayUplinkForwardingRuleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRelayUplinkForwardingRuleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRelayUplinkForwardingRuleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRelayUplinkForwardingRuleResponseValidationError{}
